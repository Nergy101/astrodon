name: Advanced Release

on:
  push:
    tags:
      - "v*"
      - "v*-alpha*"
      - "v*-beta*"
      - "v*-rc*"

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for changelog generation

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v2.4.0

      - name: Cache Deno dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/deno
            deno.lock
          key: ${{ runner.os }}-deno-${{ hashFiles('**/deno.lock') }}
          restore-keys: |
            ${{ runner.os }}-deno-

      - name: Install dependencies
        run: deno cache build.ts

      - name: Build project
        run: deno task build

      - name: Parse tag and determine release type
        id: parse_tag
        run: |
          TAG_NAME="${GITHUB_REF#refs/tags/}"
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_OUTPUT

          # Extract version without prefix
          VERSION="${TAG_NAME#v}"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

          # Determine release type
          if [[ "$TAG_NAME" == *"-alpha"* ]]; then
            RELEASE_TYPE="alpha"
            IS_PRERELEASE=true
            IS_DRAFT=false
          elif [[ "$TAG_NAME" == *"-beta"* ]]; then
            RELEASE_TYPE="beta"
            IS_PRERELEASE=true
            IS_DRAFT=false
          elif [[ "$TAG_NAME" == *"-rc"* ]]; then
            RELEASE_TYPE="rc"
            IS_PRERELEASE=true
            IS_DRAFT=false
          else
            RELEASE_TYPE="release"
            IS_PRERELEASE=false
            IS_DRAFT=false
          fi

          echo "RELEASE_TYPE=$RELEASE_TYPE" >> $GITHUB_OUTPUT
          echo "IS_PRERELEASE=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "IS_DRAFT=$IS_DRAFT" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")

          if [ -z "$PREVIOUS_TAG" ]; then
            # First release - get all commits
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            # Get commits since last tag
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges $PREVIOUS_TAG..HEAD)
          fi

          # Categorize commits
          FEATURES=$(echo "$COMMITS" | grep -i "feat\|feature\|add" || echo "")
          FIXES=$(echo "$COMMITS" | grep -i "fix\|bug\|patch" || echo "")
          BREAKING=$(echo "$COMMITS" | grep -i "breaking\|major" || echo "")
          OTHER=$(echo "$COMMITS" | grep -v -i "feat\|feature\|add\|fix\|bug\|patch\|breaking\|major" || echo "")

          # Build changelog
          CHANGELOG=""

          if [ ! -z "$BREAKING" ]; then
            CHANGELOG="$CHANGELOG\n## üö® Breaking Changes\n$BREAKING\n"
          fi

          if [ ! -z "$FEATURES" ]; then
            CHANGELOG="$CHANGELOG\n## ‚ú® New Features\n$FEATURES\n"
          fi

          if [ ! -z "$FIXES" ]; then
            CHANGELOG="$CHANGELOG\n## üêõ Bug Fixes\n$FIXES\n"
          fi

          if [ ! -z "$OTHER" ]; then
            CHANGELOG="$CHANGELOG\n## üìù Other Changes\n$OTHER\n"
          fi

          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo -e "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create release archives
        run: |
          VERSION="${{ steps.parse_tag.outputs.VERSION }}"

          # Create tar.gz archive
          cd dist
          tar -czf ../astrodon-$VERSION.tar.gz .
          cd ..

          # Create zip archive
          zip -r astrodon-$VERSION.zip dist/

          # Create a minimal archive with just the essential files
          mkdir -p minimal
          cp -r dist/* minimal/
          cd minimal
          tar -czf ../astrodon-$VERSION-minimal.tar.gz .
          cd ..
          rm -rf minimal

          echo "üì¶ Created release archives:"
          ls -lh astrodon-$VERSION.*

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.parse_tag.outputs.TAG_NAME }}
          release_name: |
            ${{ steps.parse_tag.outputs.RELEASE_TYPE == 'alpha' && 'üöß Alpha Release' || '' }}
            ${{ steps.parse_tag.outputs.RELEASE_TYPE == 'beta' && 'üß™ Beta Release' || '' }}
            ${{ steps.parse_tag.outputs.RELEASE_TYPE == 'rc' && 'üéØ Release Candidate' || '' }}
            ${{ steps.parse_tag.outputs.RELEASE_TYPE == 'release' && 'üéâ Release' || '' }}
            ${{ steps.parse_tag.outputs.VERSION }}
          body: |
            ## üìã Release Information

            **Version:** ${{ steps.parse_tag.outputs.VERSION }}
            **Type:** ${{ steps.parse_tag.outputs.RELEASE_TYPE }}
            **Build Date:** $(date -u +"%Y-%m-%d %H:%M UTC")

            ## üîÑ What's Changed

            ${{ steps.changelog.outputs.CHANGELOG }}

            ## üì¶ Build Information

            - **Runtime:** Deno v2.4.0
            - **Build System:** Astrodon
            - **Archive Formats:** TAR.GZ, ZIP, Minimal TAR.GZ

            ## üöÄ Installation

            1. Download the appropriate archive for your platform
            2. Extract the files to your desired location
            3. Serve the files using your preferred web server

            ### Archive Options

            - **Full Archive** (`astrodon-${{ steps.parse_tag.outputs.VERSION }}.tar.gz`): Complete build with all assets
            - **ZIP Archive** (`astrodon-${{ steps.parse_tag.outputs.VERSION }}.zip`): Windows-friendly format
            - **Minimal Archive** (`astrodon-${{ steps.parse_tag.outputs.VERSION }}-minimal.tar.gz`): Essential files only

            ## üîß Development

            For development setup, see the [README](https://github.com/${{ github.repository }}/blob/main/README.md).
          draft: ${{ steps.parse_tag.outputs.IS_DRAFT }}
          prerelease: ${{ steps.parse_tag.outputs.IS_PRERELEASE }}

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./astrodon-${{ steps.parse_tag.outputs.VERSION }}.tar.gz
          asset_name: astrodon-${{ steps.parse_tag.outputs.VERSION }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload Release Assets (ZIP)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./astrodon-${{ steps.parse_tag.outputs.VERSION }}.zip
          asset_name: astrodon-${{ steps.parse_tag.outputs.VERSION }}.zip
          asset_content_type: application/zip

      - name: Upload Minimal Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./astrodon-${{ steps.parse_tag.outputs.VERSION }}-minimal.tar.gz
          asset_name: astrodon-${{ steps.parse_tag.outputs.VERSION }}-minimal.tar.gz
          asset_content_type: application/gzip

      - name: Generate build report
        run: |
          echo "üìä Build Report for ${{ steps.parse_tag.outputs.VERSION }}"
          echo "=================================="
          echo ""
          echo "üìÅ Build Contents:"
          du -sh dist/ || echo "dist/ directory not found"
          echo ""
          echo "üìÑ File Counts:"
          find dist/ -type f -name "*.html" | wc -l | xargs echo "HTML files:"
          find dist/ -type f -name "*.css" | wc -l | xargs echo "CSS files:"
          find dist/ -type f -name "*.js" | wc -l | xargs echo "JS files:"
          find dist/ -type f -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" -o -name "*.gif" -o -name "*.webp" | wc -l | xargs echo "Image files:"
          echo ""
          echo "üì¶ Archive Sizes:"
          ls -lh astrodon-${{ steps.parse_tag.outputs.VERSION }}.*
          echo ""
          echo "üéØ Release Type: ${{ steps.parse_tag.outputs.RELEASE_TYPE }}"
          echo "üîó Release URL: ${{ steps.create_release.outputs.html_url }}"
